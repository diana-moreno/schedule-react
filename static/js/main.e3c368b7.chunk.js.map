{"version":3,"sources":["components/Header/Header.js","components/NewEvent/NewEvent.js","components/Event/Event.js","components/EventsList/EventsList.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","initialState","event","location","date","time","notes","error","Event","state","handleChange","e","console","log","target","name","value","setState","handleSubmit","preventDefault","newEvent","id","uuid","props","createNewEvent","this","onSubmit","type","placeholder","onChange","Component","deleteEvent","onClick","EventsList","events","message","Object","keys","length","map","key","App","elems","filter","eventsLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3c368b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({title}) => (\n  <header>\n    <h1 className='text-center'>{title}</h1>\n  </header>\n)\n\n//documentar la aplicación para saber el tipo de dato que se espera y si es obligatorio o no.\nHeader.propTypes = {\n  title : PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport './NewEvent.css'\n\nconst initialState = { // se declara fuera para poder resetearlo\n  event: {\n    title: '',\n    location: '',\n    date: '',\n    time: '',\n    notes: '',\n  },\n  error: false\n}\n\nclass Event extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     event: {\n  //       title: '',\n  //       location: '',\n  //       date: '',\n  //       time: '',\n  //       notes: '',\n  //     }\n  //   }\n  //   this.handleChange = this.handleChange.bind(this);\n  // }\n  state = {...initialState}\n\n  // Cuando el usuario escribe en los inputs, el state toma el valor del value\n  handleChange = e => { //con arrow function no se pierde el this y no hace falta bindear. (con esta forma sí hace falta: handleChange(e) {})\n    console.log(e.target.name + ': ' + e.target.value);\n    this.setState({\n      event: {\n        ...this.state.event, //hace una copia para no modificar todo\n        [e.target.name] : e.target.value // sobreescribe solo el valor que cambia\n      }\n    })\n  }\n\n  //cuando el usuario envía el formulario\n  handleSubmit = e => {\n    e.preventDefault(); //evita que un texto invalido se valide\n    // extraer los valores del state\n    const { title, location, date, time, notes } = this.state.event;\n\n    // validar que todos los campos se hayan rellenado\n    if(title === '' | location === '' | date === '' | time === '' | notes === '') {\n      this.setState({\n        error: true\n      })\n      return // no se siga ejecutando el código si hay error\n    }\n\n    // generar objeto con los datos\n    const newEvent = {...this.state.event};\n    newEvent.id = uuid();\n\n    // agregar el evento al state de App. Tiene que comunicarse con App a través de props.\n    this.props.createNewEvent(newEvent)// this.state.event)\n\n    //colocar en el state el state inicial. Resetea el estado cuando no sale un error.\n    this.setState({\n      ...initialState\n    })\n  }\n\n  render() {\n\n      //extraer valor del state\n      const { error } = this.state;\n\n    return (\n      <div className='card mt-5 py-5'> {/*create a card with margin an padding responsible from bootstrap*/}\n        <div className='card-body'>\n          <h2 className='card-title text-center mb-5'>\n            Add a new event\n          </h2>\n\n          { error ? <div className='alert alert-danger text-center'>All fields are required.</div> : null }\n\n          <form onSubmit={this.handleSubmit}>\n\n            <div className='form-group row'>\n              <label className='col-sm-4 col-lg-2 col-form-label text-nowrap'> Title\n              </label>\n              <div className='col-sm-8 col-lg-10'>\n                <input\n                  type='text'\n                  className='form-control'\n                  placeholder='Title'\n                  name='title'\n                  onChange={this.handleChange}\n                  value={this.state.event.title}\n                />\n              </div>\n            </div>\n\n            <div className='form-group row'>\n              <label className='col-sm-4 col-lg-2 col-form-label text-nowrap'> Location\n              </label>\n              <div className='col-sm-8 col-lg-10'>\n                <input\n                  type='text'\n                  className='form-control'\n                  placeholder='Location'\n                  name='location'\n                  onChange={this.handleChange}\n                  value={this.state.event.location}\n                />\n              </div>\n            </div>\n\n            <div className='form-group row'>\n              <label className='col-sm-4 col-lg-2 col-form-label text-nowrap'> Date\n              </label>\n              <div className='col-sm-8 col-lg-4'>\n                <input\n                  type='date'\n                  className='form-control'\n                  name='date'\n                  onChange={this.handleChange}\n                  value={this.state.event.date}\n                />\n              </div>\n\n              <label className='col-sm-4 col-lg-2 col-form-label text-nowrap'> Time\n              </label>\n              <div className='col-sm-8 col-lg-4'>\n                <input\n                  type='time'\n                  className='form-control'\n                  name='time'\n                  onChange={this.handleChange}\n                  value={this.state.event.time}\n                />\n              </div>\n            </div>\n\n            <div className='form-group row'>\n              <label className='col-sm-4 col-lg-2 col-form-label text-nowrap'>Notes\n              </label>\n              <div className='col-sm-8 col-lg-10'>\n                <textarea\n                  type='text'\n                  className='form-control'\n                  placeholder='Notes'\n                  name='notes'\n                  onChange={this.handleChange}\n                  value={this.state.event.notes}\n                ></textarea>\n              </div>\n            </div>\n\n            <div className='row'>\n              <input\n                type='submit'\n                className='py-3 mt-5 col-sm-4 col-lg-4 btn btn-success mx-auto'\n                value='Add event'\n              />\n            </div>\n\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Event;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Event = ({event, deleteEvent}) => (\n  <div className='media'>\n    <div className='media-body d-flex justify-content-between align-items-center'>\n      <div className='w-75 ml-5'>\n        <h4 className='mt-0'>{event.title}</h4>\n        <p className='card-text'><span>Location: </span> {event.location}</p>\n        <p className='card-text'><span>Date: </span> {event.date}</p>\n        <p className='card-text'><span>Time: </span> {event.time}</p>\n        <p className='card-text'><span>Notes: </span></p>\n        <p className='card-text'>{event.notes}</p>\n        </div>\n      <div className='w-25 text-right mr-5'>\n        <button\n          className='btn btn-danger'\n          onClick={() => deleteEvent(event.id)}// se necesita pasar el valor del id, para ello hay que bindear el id a través del constructor o arrow function\n        >Delete event</button>\n      </div>\n    </div>\n  </div>\n);\n\nEvent.propTypes = {\n  event : PropTypes.object.isRequired,\n  deleteEvent : PropTypes.func.isRequired\n}\n\nexport default Event;","import React from 'react';\nimport Event from '../Event/Event';\nimport PropTypes from 'prop-types';\n\n\nconst EventsList = ({events, deleteEvent}) => {\n  const message = Object.keys(events).length === 0 ? 'There are no events'\n                                                   : 'Manage your events here'\n\n  return (\n    <div className='card py-5'>\n      <div className='card-body'>\n        <h2 className='card-title text-center mb-5'>{message}</h2>\n        <div className='events-list'>\n          {events.map(event => (\n            <Event\n              key={event.id}\n              event={event}\n              deleteEvent={deleteEvent}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nEventsList.propTypes = {\n  events : PropTypes.array.isRequired,\n  deleteEvent : PropTypes.func.isRequired\n}\n\nexport default EventsList","import React, { Component } from 'react';\n// import './bootstrap.min.css'; // https://bootswatch.com/\n// import './index.css';\nimport Header from './components/Header/Header';\nimport NewEvent from './components/NewEvent/NewEvent';\nimport EventsList from './components/EventsList/EventsList';\n\n\nclass App extends Component {\n  state = {\n    events: []\n  }\n  // cargar los datos almacenados al cargar la página\n  componentDidMount() {\n    const eventsLS = localStorage.getItem('events')\n    if(eventsLS) {\n      this.setState({\n        events: JSON.parse(eventsLS) // lo convierte en un array de objetos\n      })\n    }\n  }\n  // almacenar los datos cuando se añaden o eliminan eventos\n  componentDidUpdate() {\n    localStorage.setItem('events', JSON.stringify(this.state.events));\n  }\n  // esta función se crea para pasar datos del hijo al padre, ya que normalmente los datos se pasan del padre al hijo\n  createNewEvent = elems => {\n    //console.log(elems)\n\n    //en el state no se puede hacer push, así que se hace una copia del objeto, se modifica y después se sustituye el state por el nuevo state\n    const events = [...this.state.events, elems];  // lo que ya hubiera en el array .concat(elems)\n\n    // cambiar el estado sustituyendo el valor del state por el nuevo\n    this.setState({\n      events //como se llaman igual, le pasamos solo uno\n    })\n  }\n\n  //delete events\n  deleteEvent = id => {\n    //console.log(id)\n    //crear una copia del state\n    const actualEvents = [...this.state.events];\n\n    //utilizar filter para extraer el elemento id del array que coincida en id\n    const events = actualEvents.filter(event => event.id !== id)\n\n    //actualizar el state\n    this.setState({\n      events\n    })\n  };\n\n\n  render() {\n    return (\n      <div className='container-fluid'>\n        <Header\n          title='My Personal Schedule'\n        />\n        <div className='d-flex flex-wrap'>\n\n          <div className='col-md-4 mx-auto'>\n            <NewEvent\n              createNewEvent={this.createNewEvent}\n            />\n\n          </div>\n\n          <div className='mt-5 col-md-6 mx-auto'>\n            <EventsList\n              events={this.state.events}\n              deleteEvent={this.deleteEvent}\n            />\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css'; // https://bootswatch.com/\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}